package main

import (
	"fmt"
)

func notmain() {
	// fmt.Println(strStr("elephant", "ant"))
	// fmt.Println(strStr("elephant", "ct"))
	// fmt.Println(strStr("elephant", "ele"))
	// fmt.Println(strStr("elephant", "anta"))

	fmt.Println(getPatternTable("wasmwasuijwasmwasiop"))
}

func strStr(haystack string, needle string) int {
	index := -1
	if needle == "" {
		return 0
	}
	for i := 0; i <= len(haystack)-len(needle); i++ {
		if haystack[i] == needle[0] {
			result := contains(haystack[i:], needle)
			if result == 0 {
				return i
			}
		}
	}
	return index
}

func contains(str, substr string) int {
	for i, v := range substr {
		b := string(str[i])
		if string(v) != b {
			return -1
		}
	}
	return 0
}

// w,a,s,j,u,w,a,i,w,a,s,j,f,m
// 0,0,0,0,0,1,2,0,1,2,3,4,0

// wasmwasuijwasmwasiop
// 0,0,0,0,1,2,3,0,0,0,1,2,3,4,5,6,7,3
// 0,0,0,0,1,2,3,0,0,0,1,2,3,4,5,6,7,

func KMPSubstr(str, substring string) int {
	lenSub := len(substring)
	lenStr := len(str)
	result := -1
	if lenSub == 0 || lenStr == 0 {
		return 0
	}
	if lenSub < lenStr {
		return result
	}
	// Prefix Suffix table
	patternTable := getPatternTable(substring)
	for i := 0; i < lenStr; i++ {
		if substring[0] != str[i] {
			continue
		}

	}
	return patternTable[0]
}

func getPatternTable(substr string) []int {
	patternTable := make([]int, len(substr))
	i := 0
	patternTable[0] = 0
	subsrIndex := 0
	for j := 1; j < len(substr); j++ {
		for i > 0 && substr[j] != substr[i] {
			i = patternTable[i]
		}
		if substr[j] == substr[i] {
			i++
		}
		patternTable[j] = i
	}
	return patternTable
}

package algorithms

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_generateParenthesis(t *testing.T) {
	testCases := []struct {
		ParenCount int
		Expected   []string
	}{
		{
			2,
			[]string{"()()", "(())"},
		},
		{
			6,
			[]string{},
		},
		{
			3,
			[]string{"()()()", "()(())", "(())()", "(()())", "((()))"},
		},
		{
			4,
			[]string{"()()()()", "()()(())", "()(())()", "()(()())", "()((()))", "(())()()", "(())(())", "(()())()", "(()()())", "(()(()))", "((()))()", "((())())", "((()()))", "(((())))"},
		},
		{
			5,
			[]string{},
		},
	}
	for _, tc := range testCases {
		actual := generateParenthesis(tc.ParenCount)
		assert.Equal(t, tc.Expected, actual, fmt.Sprintf("Failed for Digit %d", tc.ParenCount))
	}
}
